name: Frontend Continuous Deployment
on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  # Set Node.js Version to match FE requirements (18.14)
  NODE_VERSION: '18.x'

jobs:
  # note that even though the project ruberic states that there should be lint and test "steps",
  #  they must in fact be jobs since build depends on both of them and steps cannot use "needs"
  # note lint and test are run in parallel
  # build waits / needs both to be completed first
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: 'npm'
      - name: Install dependencies and lint
        run: |
          npm ci
          npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: 'npm'
      - name: Install dependencies and test
        run: |
          npm ci
          npm run test

  build_deploy:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: 'npm'

      - name: Install dependencies and test
        run: |
          npm ci
          npm run test

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # - name: Login to container registry
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.REGISTRY_USERNAME }}
      #     password: ${{ secrets.REGISTRY_PASSWORD }}

      # TODO: this is where need to pass in the build args to docker file (i think)
      # specifically, it needs REACT_APP_MOVIE_API_URL
      # atm i am having a hard time understanding how to get this url. it appears
      #  that this is the url to the backend / api, but don't know if i'm supposed to
      #  get this automatically or deploy backend first and then get the url and then
      #  hardcode it here. same for image tag / build number below
      # in any case, this is what it looks like locally if you manulally run backend
      #  REACT_APP_MOVIE_API_URL=http://localhost:5000 npm start

      # There should be a step that builds the application using docker only after linting and testing complete
      #  (use the needs directive) This step should also utilize build-args to ensure the application is built with an environment
      #  variable REACT_APP_MOVIE_API_URL

      # There should be a step that utilizes aws-actions/amazon-ecr-login action for logging into ECR.
      #  (using 3rd party actions) The ECR login step should also be accessing Github Secrets for credentials. (secure approach)

      # There should be a step that pushes the docker image to ECR in the AWS account.
      # There should be a step that deploys the application using kubectl to the eks cluster

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     push: true
      #     tags: <your-container-registry>/<your-image>:latest

      # - name: Set up kubectl
      #   uses: azure/setup-kubectl@v2
      #   with:
      #     version: 'latest'

      # - name: Deploy to Kubernetes
      #   # i don't know what kubeconfig is, ie which file in k8s
      #   run: |
      #     echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
      #     kubectl apply -f k8s/ --kubeconfig=kubeconfig.yaml

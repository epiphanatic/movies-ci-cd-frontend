name: Frontend Continuous Deployment
on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  # Set Node.js Version to match FE requirements (18.14)
  NODE_VERSION: '18.x'

jobs:
  # note that even though the project ruberic states that there should be lint and test "steps",
  #  they must in fact be jobs since build depends on both of them and steps cannot use "needs"
  # note lint and test are run in parallel
  # build waits / needs both to be completed first
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: 'npm'
      - name: Install dependencies and lint
        run: |
          npm ci
          npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: 'npm'
      - name: Install dependencies and test
        run: |
          npm ci
          npm run test

  build_deploy:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: 'npm'

      - name: Install dependencies and test
        run: |
          npm ci
          npm run test

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1

      # TODO: this is where need to pass in the build args to docker file (i think)
      # specifically, it needs REACT_APP_MOVIE_API_URL
      # atm i am having a hard time understanding how to get this url. it appears
      #  that this is the url to the backend / api, but don't know if i'm supposed to
      #  get this automatically or deploy backend first and then get the url and then
      #  hardcode it here. same for image tag / build number below
      # in any case, this is what it looks like locally if you manulally run backend
      #  REACT_APP_MOVIE_API_URL=http://localhost:5000 npm start

      # There should be a step that builds the application using docker only after linting and testing complete
      #  (use the needs directive) This step should also utilize build-args to ensure the application is built with an environment
      #  variable REACT_APP_MOVIE_API_URL

      # login to ECR 
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      # There should be a step that pushes the docker image to ECR in the AWS account.
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: 473659653982.dkr.ecr.us-east-1.amazonaws.com 
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
          REACT_APP_MOVIE_API_URL: http://localhost:5000
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # set up kubectl - note that the input (secrets.KUBECONFIG) is a base64 encoded string of the entire .kube/config file in home directory
      - name: Set up kubectl
        uses: ThomasKliszowski/setup-kubectl@v1
        with:
          kube-config: ${{ secrets.KUBECONFIG }}
          kube-version: 1.15.0

      # There should be a step that deploys the application using kubectl to the kubernetes cluster
      - name: Deploy to Kubernetes
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > kubeconfig.yaml
          kubectl apply -k k8s/ --kubeconfig=kubeconfig.yaml
